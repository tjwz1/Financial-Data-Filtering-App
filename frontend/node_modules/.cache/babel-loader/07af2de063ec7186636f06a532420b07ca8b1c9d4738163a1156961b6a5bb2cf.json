{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tjzha\\\\financial-filtering-app\\\\frontend\\\\src\\\\FinancialData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FinancialData() {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch data from the Flask backend\n  const fetchData = async (sort, order, filter, min, max) => {\n    setLoading(true);\n    let url = `http://localhost:5000/data?`;\n    if (sort) url += `sort=${sort}&`;\n    if (order) url += `order=${order}&`;\n    if (filter) url += `filter=${filter}&`;\n    if (min) url += `min=${min}&`;\n    if (max) url += `max=${max}&`;\n    try {\n      const response = await fetch(url);\n      const result = await response.json();\n      if (response.ok) {\n        setData(result);\n      } else {\n        throw new Error(result.message || \"Failed to fetch data\");\n      }\n    } catch (error) {\n      setError(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initial data fetch\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Handle sorting by column\n  const handleSort = column => {\n    var _data$, _data$sort$;\n    const isAsc = ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$[column]) === ((_data$sort$ = data.sort((a, b) => a[column] - b[column])[0]) === null || _data$sort$ === void 0 ? void 0 : _data$sort$[column]);\n    fetchData(column, isAsc ? \"desc\" : \"asc\");\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Annual Financial Data for Apple\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort(\"date\"),\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort(\"revenue\"),\n            children: \"Revenue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort(\"netIncome\"),\n            children: \"Net Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort(\"grossProfit\"),\n            children: \"Gross Profit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort(\"eps\"),\n            children: \"EPS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort(\"operatingIncome\"),\n            children: \"Operating Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.revenue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.netIncome\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.grossProfit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.eps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.operatingIncome\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(FinancialData, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\n_c = FinancialData;\nexport default FinancialData;\nvar _c;\n$RefreshReg$(_c, \"FinancialData\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FinancialData","_s","data","setData","loading","setLoading","error","setError","fetchData","sort","order","filter","min","max","url","response","fetch","result","json","ok","Error","message","handleSort","column","_data$","_data$sort$","isAsc","a","b","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","item","index","date","revenue","netIncome","grossProfit","eps","operatingIncome","_c","$RefreshReg$"],"sources":["C:/Users/tjzha/financial-filtering-app/frontend/src/FinancialData.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction FinancialData() {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch data from the Flask backend\r\n  const fetchData = async (sort, order, filter, min, max) => {\r\n    setLoading(true);\r\n    let url = `http://localhost:5000/data?`;\r\n    if (sort) url += `sort=${sort}&`;\r\n    if (order) url += `order=${order}&`;\r\n    if (filter) url += `filter=${filter}&`;\r\n    if (min) url += `min=${min}&`;\r\n    if (max) url += `max=${max}&`;\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      const result = await response.json();\r\n      if (response.ok) {\r\n        setData(result);\r\n      } else {\r\n        throw new Error(result.message || \"Failed to fetch data\");\r\n      }\r\n    } catch (error) {\r\n      setError(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Initial data fetch\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Handle sorting by column\r\n  const handleSort = (column) => {\r\n    const isAsc = data[0]?.[column] === data.sort((a, b) => a[column] - b[column])[0]?.[column];\r\n    fetchData(column, isAsc ? \"desc\" : \"asc\");\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Annual Financial Data for Apple</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th onClick={() => handleSort(\"date\")}>Date</th>\r\n            <th onClick={() => handleSort(\"revenue\")}>Revenue</th>\r\n            <th onClick={() => handleSort(\"netIncome\")}>Net Income</th>\r\n            <th onClick={() => handleSort(\"grossProfit\")}>Gross Profit</th>\r\n            <th onClick={() => handleSort(\"eps\")}>EPS</th>\r\n            <th onClick={() => handleSort(\"operatingIncome\")}>Operating Income</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map((item, index) => (\r\n            <tr key={index}>\r\n              <td>{item.date}</td>\r\n              <td>{item.revenue}</td>\r\n              <td>{item.netIncome}</td>\r\n              <td>{item.grossProfit}</td>\r\n              <td>{item.eps}</td>\r\n              <td>{item.operatingIncome}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FinancialData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}